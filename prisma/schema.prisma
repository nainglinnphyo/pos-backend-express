generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

generator dbml {
  provider            = "prisma-dbml-generator"
  outputName          = "yama.dbml"
  projectName         = "Yama"
  projectDatabaseType = "mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  email    String? @unique
  phone    String? @unique
  password String

  Transaction Transaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

// product schemas

model Category {
  id            String @id @default(uuid())
  category_name String @unique

  Product Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("categories")
}

model Product {
  id           String @id @default(uuid())
  product_code String
  product_name String

  category_id String
  Category    Category @relation(fields: [category_id], references: [id])
  unit_id     String
  Unit        Unit     @relation(fields: [unit_id], references: [id])

  Instock          Instock[]
  ProductPriceList ProductPriceList[]
  Composite        Composite[]
  inStockOnProduct inStockOnProduct[]
  SaleItem         SaleItem[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("products")
}

model Price {
  id   String @id @default(uuid())
  name String

  ProductPriceList   ProductPriceList[]
  CompositePriceList CompositePriceList[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("prices")
}

model ProductPriceList {
  id     String @id @default(uuid())
  amount Float

  product_id String
  Product    Product @relation(fields: [product_id], references: [id])
  price_id   String
  Price      Price   @relation(fields: [price_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("product_price_list")
}

model Composite {
  id       String @id @default(uuid())
  name     String
  per_unit Float

  product_id String
  Product    Product @relation(fields: [product_id], references: [id])
  unit_id    String
  Unit       Unit    @relation(fields: [unit_id], references: [id])

  CompositePriceList CompositePriceList[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("composite")
}

model CompositePriceList {
  id     String @id @default(uuid())
  amount Float

  composite_id String
  Composite    Composite @relation(fields: [composite_id], references: [id])
  price_id     String
  Price        Price     @relation(fields: [price_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("composite_price_list")
}

model Unit {
  id        String @id @default(uuid())
  unit_name String @unique

  Product   Product[]
  Composite Composite[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("units")
}

// static data schemas

model Supplier {
  id            String  @id @default(uuid())
  supplier_name String
  short_name    String?
  address       String?
  phone         String?

  InStockVoucher InStockVoucher[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("suppliers")
}

model Customer {
  id            String  @id @default(uuid())
  customer_name String
  short_name    String?
  address       String?
  phone         String?

  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  SaleVoucher SaleVoucher[]

  @@map("customers")
}

model Warehouse {
  id             String @id @default(uuid())
  warehouse_name String

  InStockVoucher   InStockVoucher[]
  inStockOnProduct inStockOnProduct[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("warehouses")
}

// stock data schemas

model InStockVoucher {
  id               String @id @default(uuid())
  discount         Float?
  total            Float?
  grand_total      Float?
  round_adjustment Float?

  supplier_id    String
  Supplier       Supplier        @relation(fields: [supplier_id], references: [id])
  voucher_status Voucher_Status?
  warehouse_id   String
  Warehouse      Warehouse       @relation(fields: [warehouse_id], references: [id])

  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Transaction Transaction[]
  Instock     Instock[]

  @@map("instock_voucher")
}

enum Voucher_Status {
  done
  remainder
}

model Instock {
  id String @id @default(uuid())

  total_quantity     Int
  foc                Int?           @default(0)
  discount_on_item   Int?           @default(0)
  total_amount       Float
  instock_voucher_id String
  InstockVoucher     InStockVoucher @relation(fields: [instock_voucher_id], references: [id])
  product_id         String
  Product            Product        @relation(fields: [product_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("instock")
}

model inStockOnProduct {
  id String @id @default(uuid())

  warehouse_id String
  Warehouse    Warehouse @relation(fields: [warehouse_id], references: [id])

  quantity   Int
  product_id String
  Product    Product @relation(fields: [product_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("instock_on_product")
}

model SaleVoucher {
  id               String @id @default(uuid())
  discount         Float?
  grand_total      Float?
  total            Float?
  round_adjustment Float?

  customer_id    String
  Customer       Customer        @relation(fields: [customer_id], references: [id])
  voucher_status Voucher_Status?

  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Transaction Transaction[]
  SaleItem    SaleItem[]

  @@map("sale_voucher")
}

model SaleItem {
  id              String      @id @default(uuid())
  total_quantity  Int
  total_amount    Float
  sale_voucher_id String
  SaleVoucher     SaleVoucher @relation(fields: [sale_voucher_id], references: [id])
  product_id      String
  Product         Product     @relation(fields: [product_id], references: [id])
}

model Transaction {
  id      String  @id @default(uuid())
  paid    Float
  balance Float
  remark  String?
  total   Float

  issued_by_id       String?
  Issued_By          User?           @relation(fields: [issued_by_id], references: [id])
  instock_voucher_id String?
  InStockVoucher     InStockVoucher? @relation(fields: [instock_voucher_id], references: [id])
  payment_method_id  String
  Payment_method     PaymentMethod   @relation(fields: [payment_method_id], references: [id])

  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  SaleVoucher     SaleVoucher? @relation(fields: [sale_voucher_id], references: [id])
  sale_voucher_id String?

  @@map("transaction")
}

model PaymentMethod {
  id   String @id @default(uuid())
  name String @unique

  Transaction Transaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("payment_methods")
}
